struct TrieNode {
    TrieNode *next[26];
    bool is_word;

    TrieNode() {
        for (int i = 0; i < 26; i++) {
            next[i] = NULL;
        }
        is_word = false;
    }
};

class Trie {
    TrieNode *root;
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string s) {
        TrieNode *p = root;
        for (int i = 0; i < s.size(); i++) {
            if (p->next[s[i] - 'a'] == NULL) {
                p->next[s[i] - 'a'] = new TrieNode();
            }
            p = p->next[s[i] - 'a'];
        }
        p->is_word = true;
    }

    bool search(string key) {
        TrieNode *p = find(key);
        return p != NULL && p->is_word;
    }

    bool startsWith(string prefix) {
        return find(prefix) != NULL;
    }

private:
    TrieNode *find(string key) {
        TrieNode *p = root;
        for (int i = 0; i < key.size() && p != NULL; i++) {
            p = p->next[key[i] - 'a'];
        }
        return p;
    }
};
