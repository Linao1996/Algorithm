package pac2;

/*
Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

click to show spoilers.

Note:
The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.k
*/
public class Solution {
    public int reverse(int x) {
/*
        int flag = x > 0 ? 1 : -1;   You don't need flag, since in java -7 % 10 returns -7 rather than 7;
        like c language, the operator % is defined as (a/ b) * b + a % b = a, so it's actually the reminder rather than modular;
        besides, this seemingly logical definition may lead to wired result, such as :
        -7 % 10 = -7, since -7 / 10 = 0, and only 0 * 10 + -7 = -7;
        7 % -10 = 7, since 7 / -10 = 0, and only 0 * 10 + 7 = 7
        likewise, -8 % 5 = -3 while 8 % -5 = 3;
        */
        int result = 0;
        while (x != 0) {
            int tail = x % 10;
            int newResult = result * 10 + tail;
            if ((newResult - tail) / 10 != result) {
                return 0;
            }

            result = newResult;
            x /= 10;
        }
/*
if (result > Integer./*MAX_VALUE || result < Integer.MIN_VALUE) {
return 0;  !!!Don't code this way, since result could overflow in previous while loop!
}* /
*/
        return result;
//        result *= flag;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        System.out.println(s.reverse(153423649));
    }
}
