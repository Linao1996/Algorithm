class Solution {
public:
    bool isPalindrome(ListNode *head) {
        return check(head, head);
    }

    bool check(ListNode *&head, ListNode *p) {
        if (!p)return true;
        bool res = true;
        res = check(head,p->next) && res;
        if(head->val != p->val){
            return false;
        }
        head = head->next;
        return res;
    }
};

\\\\Better ways is the following:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
   
ListNode * reverseList(ListNode *head) {
    if (!head)return NULL;
    ListNode *p = head->next;
    ListNode *pre = head;
    while (p) {
        pre->next = p->next;
        p->next = head;
        head = p;
        p = pre->next;
    }
    return head;
}


bool isPalindrome(ListNode *head) {
    if (!head || !head->next)return true;
    ListNode *slow = head;
    ListNode *fast = head;
    while (fast->next && fast->next->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    slow = slow->next;
    slow = reverseList(slow);
//    printf("slow:%d\n",slow->val);
    while (slow) {
        if (head->val != slow->val) {
            return false;
        }
        slow = slow->next;
        head = head->next;
    }
    return true;
}
};
