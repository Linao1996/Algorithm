#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int tag;
    int next;

    bool operator<(const Edge &edge) const {
        return next < edge.next;
    }
};


bool mark[100010];
vector<Edge> edges[10010];


int result[10010];

int n, m;
bool success = false;

void BFS(int n, int depth) {
    if (depth == m) {
        success = true;
    }
    if (success) {
        result[depth] = n;
        return;
    }
    result[depth] = n;
    Edge tmpEdge;
    for (int i = 0; i < edges[n].size(); i++) {
        tmpEdge = edges[n][i];
        if (!mark[tmpEdge.tag]) {
            mark[tmpEdge.tag] = true;
            BFS(tmpEdge.next, depth + 1);
            if (success) {
                return;
            }
            mark[tmpEdge.tag] = false;
        }
    }
}

int main(void) {
    cin >> n >> m;
    int a, b;
    for (int i = 0; i < m; i++) {
        mark[i] = false;
    }
    for (int i = 0; i < n; i++) {
        result[i] = -1;
    }
    for (int i = 0; i < m; i++) {
        cin >> a >> b;
        Edge edge;
        edge.tag = i;
        edge.next = a;
        edges[b].push_back(edge);
        edge.next = b;
        edges[a].push_back(edge);
    }
    for (int i = 0; i < n; i++) {
        sort(edges[i].begin(), edges[i].end());
    }

    BFS(1, 0);
    if (success) {
        for (int i = 0; i < m; i++) {
            printf("%d ", result[i]);
        }
        printf("%d",result[m]);
        printf("\n");
    } else {
        printf("-1\n");
    }
}


//4 5
//1 4
//1 2
//1 3
//3 4
//2 4
//

