#include <stdio.h>
#include <vector>
#include <iostream>
#include <stack>
#include <algorithm>

using namespace std;


stack<int> S;

int uf[10010];
bool mark[10010];

int findRoot(int a) {
    if (uf[a] == -1) {
        return a;
    } else {
        return uf[a] = findRoot(uf[a]);
    }
}

void unionNode(int a, int b) {
    int m = findRoot(a);
    int n = findRoot(b);
    if (m != n) {
        uf[m] = n;
    }
}

struct Edge {
    int tag;
    int next;

    bool operator<(const Edge &edge) const {
        return next < edge.next;
    }
};

vector<Edge> edges[10010];

void init() {
    for (int i = 0; i < 10010; i++) {
        edges[i].clear();
        uf[i] = -1;
        mark[i] = false;
    }
}

void DFS(int n) {// too deep ,causing stack overflow
    for (int i = 0; i < edges[n].size(); i++) {
        if (!mark[edges[n][i].tag]) {
            mark[edges[n][i].tag] = true;
            DFS(edges[n][i].next);
        }
    }
    S.push(n);
}


int main(void) {
    int n, m;
    while (scanf("%d%d", &n, &m) != EOF) {
        init();
        int a, b;
        Edge tmpEdge;
        for (int i = 1; i <= m; i++) {
            scanf("%d%d", &a, &b);
            tmpEdge.tag = i;
            tmpEdge.next = a;
            edges[b].push_back(tmpEdge);
            tmpEdge.next = b;
            edges[a].push_back(tmpEdge);
            unionNode(a, b);
        }
        for (int i = 1; i <= n; i++) {
            sort(edges[i].begin(), edges[i].end());
        }

        bool through = true;
        int root = findRoot(1);
        for (int i = 1; i <= n; i++) {
            if (findRoot(i) != root) {
                through = false;
                break;
            }
        }
        bool eular = through;
        int count = 0;
        if (eular) {
            for (int i = 1; i <= n; i++) {
                if (i == 4) {
                    i = 4;
                }
                if (edges[i].size() % 2 != 0) {
                    count++;
                }
                eular = count == 0 || (count == 2 && edges[1].size() % 2 == 1);
            }
        }
//        printf("count:%d\n", count);
//        printf("size:%d\n", (int) edges[4].size());
        if (eular) {
            DFS(1);
            while (!S.empty()) {
                int t = S.top();
                S.pop();
                printf("%d ", t);
            }
            printf("\n");
        } else {
            printf("%d\n", -1);
        };
    }
}
