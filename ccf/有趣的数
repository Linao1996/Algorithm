#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

int matric[4][4] = {
	0,1,1,1,
	0,0,1,1,
	1,1,0,1,
	1,1,0,0,
};

int n;
int result = 0;
int mark[4];

bool allMark(int node) {
	for (int i = 0; i < 4; i++) {
		if (mark[i] == 0 && i != node) {
			return false;
		}
	}
	return true;
}

void DFS(int node, int depth) {
	//printf("%d ", node);
	for (int i = 0; i < 4; i++) {
		if (matric[node][i] == 1) {
			if ((i == 0 && mark[1] != 0) || (i == 2 && mark[3] != 0)) {
				continue;
			}
			if (depth + 1 == n) {
				if (allMark(i)) {
					result++;
				}
				continue;
			}
			mark[i]++;
			DFS(i, depth + 1);
			mark[i]--;
		}
	}
	//printf("\n");
}
int main() {
	while (cin >> n) {
		memset(mark, 0, sizeof(mark));
		result = 0;
		mark[2] = 1;
		DFS(2, 1);
		printf("%d\n", result);
	}
	return 0;
}
