#include <stdio.h>
#include <algorithm>
#include <iostream>

using namespace std;

struct Squire {
    int hp;
    int atk;
};

struct Army {
    int hero;
    Squire squires[7];
    int squireNum;
};

Army army0;
Army army1;

void test() {
    //1
    if (army0.hero <= 0) {
        printf("%d\n", 1);
    } else if (army1.hero <= 0) {
        printf("%d\n", -1);
    } else {
        printf("%d\n", 0);
    }
    //2
    printf("%d\n", army0.hero);
    //3
    printf("%d ", army0.squireNum);
    for (int i = 0; i < army0.squireNum; i++) {
        printf("%d ", army0.squires[i].hp);
    }
    printf("\n");
    //4
    printf("%d\n", army1.hero);
    //5
    printf("%d ", army1.squireNum);
    for (int i = 0; i < army1.squireNum; i++) {
        printf("%d ", army1.squires[i].hp);
    }

}

void summonCall(int position, int attack, int health, int turn) {
    if (turn == 0) {
        Squire newSquire;
        newSquire.hp = health;
        newSquire.atk = attack;
        if (position <= army0.squireNum) {
            int tmp = army0.squireNum++;//before increment
            while (tmp != position - 1) {
                army0.squires[tmp] = army0.squires[tmp - 1];
                tmp--;
            }
            army0.squires[position - 1] = newSquire;
        } else {
            army0.squires[army0.squireNum++] = newSquire;
        }
    }
    if (turn == 1) {
        Squire newSquire;
        newSquire.hp = health;
        newSquire.atk = attack;
        if (position <= army1.squireNum) {
            int tmp = army1.squireNum++;//before increment
            while (tmp != position - 1) {
                army1.squires[tmp] = army1.squires[tmp - 1];
                tmp--;
            }
            army1.squires[position - 1] = newSquire;
        } else {
            army1.squires[army1.squireNum++] = newSquire;
        }
    }
}

void attackCall(int attacker, int defender, int turn) {
    if (turn == 0) {
        if (defender == 0) {
            army1.hero -= army0.squires[attacker - 1].atk;
        } else {
            army1.squires[defender - 1].hp -= army0.squires[attacker - 1].atk;
            army0.squires[attacker - 1].hp -= army1.squires[defender - 1].atk;
            if (army1.squires[defender - 1].hp <= 0) {
                for (int i = defender; i < army1.squireNum; i++) {
                    army1.squires[i - 1] = army1.squires[i];
                }
                army1.squireNum--;
            }
            if (army0.squires[attacker - 1].hp <= 0) {
                for (int i = attacker; i < army0.squireNum; i++) {
                    army0.squires[i - 1] = army0.squires[i];
                }
                army0.squireNum--;
            }
        }
    }
    if (turn == 1) {
        if (defender == 0) {
            army0.hero -= army1.squires[attacker - 1].atk;
        } else {
            army0.squires[defender - 1].hp -= army1.squires[attacker - 1].atk;
            army1.squires[attacker - 1].hp -= army0.squires[defender - 1].atk;
            if (army0.squires[defender - 1].hp <= 0) {
                for (int i = defender; i < army0.squireNum; i++) {
                    army0.squires[i - 1] = army0.squires[i];
                }
                army0.squireNum--;
            }
            if (army1.squires[attacker - 1].hp <= 0) {
                for (int i = attacker; i < army1.squireNum; i++) {
                    army1.squires[i - 1] = army1.squires[i];
                }
                army1.squireNum--;
            }
        }
    }
}


void init() {
    army0.hero = 30;
    army0.squireNum = 0;
    army1.hero = 30;
    army1.squireNum = 0;
}

int main(void) {
    init();
    int n;
    cin >> n;
    string op;
    string summon = "summon";
    string attack = "attack";
    string end = "end";
    int turn = 0;
    for (int i = 0; i < n; i++) {
        cin >> op;
        if (op == summon) {
            int a, b, c;
            cin >> a >> b >> c;
            summonCall(a, b, c, turn);
        } else if (op == attack) {
            int a, b;
            cin >> a >> b;
            attackCall(a, b, turn);
        } else if (op == end) {
            turn = 1 - turn;
        }
    }
    test();
}

//8
//summon 1 3 6
//summon 2 4 2
//end
//        summon 1 4 5
//summon 1 2 1
//attack 1 0
//end
//        attack 1 0
