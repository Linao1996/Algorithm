#include <stdio.h>
#include<iostream>
#include <algorithm>
#include <vector>

using namespace std;


vector<int> edges[10010];
vector<int> reachable[10010];
int newP;
bool mark[10010];


void DFS(int n) {
    for (int i = 0; i < edges[n].size(); i++) {
        if (!mark[edges[n][i]]) {
            mark[edges[n][i]] = true;
            reachable[newP].push_back(edges[n][i]);
            DFS(edges[n][i]);
//            mark[edges[n][i]] = false;
        }
    }
}


bool isReachable(int from, int to) {
    for (int i = 0; i < reachable[from].size(); i++) {
        if (reachable[from][i] == to) {
            return true;
        }
    }
    return false;
}

int main(void) {
    int n, m;
    cin >> n >> m;
    int a, b;
    for (int i = 1; i <= n; i++) {
        edges[i].clear();
        reachable[i].clear();
    }

    for (int i = 0; i < m; i++) {
        scanf("%d%d", &a, &b);
        edges[a].push_back(b);
    }


    int result;
    for (int i = 1; i <= n; i++) {//2*E + N*N
        newP = i;
        mark[i] = true;
        DFS(i);
        for(int j = 1 ;j <= n; j++){
            mark[j] = false;
        }
    }
    for (int i = 1; i <= n; i++) {//C*E
        for (int j = 0; j < reachable[i].size(); j++) {
            if (isReachable(reachable[i][j], i)) {
                result++;
            }
        }
    }
    result /= 2;
    printf("%d\n", result);
}
//4 5
//1 2
//2 1
//3 4
//1 4
//4 2
