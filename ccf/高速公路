
cf.http://www.cnblogs.com/bethunebtj/p/4854946.html
Kosaraju算法
#include <stdio.h>
#include<iostream>
#include <algorithm>
#include <vector>
#include <stack>

using namespace std;


int n, m;
vector<int> edges[10010];
vector<int> reverseEdges[10010];
vector<int> result[10010];
stack<int> S;
bool mark[10010];
bool markReverse[10010];

void DFS(int n) {
    mark[n] = true;
    for (int i = 0; i < edges[n].size(); i++) {
        if (!mark[edges[n][i]]) {
            DFS(edges[n][i]);
        }
    }
    S.push(n);
}

int countSCC = 0;

void DFSReverse(int n) {
    markReverse[n] = true;
    result[countSCC].push_back(n);
    for (int i = 0; i < reverseEdges[n].size(); i++) {
//        printf("get\n");
        if (!markReverse[reverseEdges[n][i]]) {
            DFSReverse(reverseEdges[n][i]);
        }
    }
}

int main(void) {
    while (scanf("%d%d", &n, &m) != EOF) {
        int a, b;
        for (int i = 1; i <= n; i++) {
            edges[i].clear();
            reverseEdges[i].clear();
            result[i - 1].clear();
            mark[i] = false;
            markReverse[i] = false;
            countSCC = 0;
        }
        for (int i = 0; i < m; i++) {
            scanf("%d%d", &a, &b);
            edges[a].push_back(b);
            reverseEdges[b].push_back(a);
        }
        for (int i = 1; i <= n; i++) {
            if (!mark[i]) {
                DFS(i);
            }
        }
        while (!S.empty()) {
            int tmp = S.top();
//            printf("%d\t",tmp);
            S.pop();
            if (!markReverse[tmp]) {
                DFSReverse(tmp);
//                printf("not markReverse:%d\n",tmp);
                countSCC++;
            }
        }
        int resultNum = 0;
        for (int i = 0; i < countSCC; i++) {
            unsigned long size = result[i].size();
//            printf("size:%d\n",result[i].size());
            resultNum += size * (size - 1) / 2;
        }
//        printf("countSCC:%d\n", countSCC);
        printf("%d\n", resultNum);

    }
}
